name: strmcp

x-service: &default_service
  deploy:
    restart_policy:
      condition: any
  environment: &default_service_environment
    TZ: ${TZ}

services:

  capture:
    <<: *default_service
    image: strmcp/capture:${CAPTURE}
    build: ./images/capture
    container_name: capture
    # GIDs found in /dev/dri.
    # render group must be included.
    group_add:
      - "44"
      - "104"
      - "105"
    shm_size: 2G
    depends_on:
      proxy:
        condition: service_started
    networks:
      - capture
      - outside
    environment:
      <<: *default_service_environment
      SC_CAPTURE_CONTROL_HOST: capture
      SC_CAPTURE_TIMING_URL: proxy/time
      SC_CAPTURE_RENDER: ${RENDER}
      SC_CAPTURE_SCREEN_WIDTH: ${SCREEN_WIDTH}
      SC_CAPTURE_SCREEN_HEIGHT: ${SCREEN_HEIGHT}
    devices:
      - /dev/dri:/dev/dri
    volumes:
      - data:/captures:z

  control:
    <<: *default_service
    image: strmcp/control:${CONTROL}
    build: ./images/control
    container_name: control
    depends_on:
      capture:
        condition: service_healthy
        restart: true
    networks:
      - capture
    environment:
      <<: *default_service_environment
      SC_CONTROL_DRIVER_HOST: capture
      SC_CONTROL_USERNAME_FILE: /run/secrets/control_username
      SC_CONTROL_PASSWORD_FILE: /run/secrets/control_password
      SC_CAPTURE_SCREEN_WIDTH: ${SCREEN_WIDTH}
      SC_CAPTURE_SCREEN_HEIGHT: ${SCREEN_HEIGHT}
    secrets:
      - control_username
      - control_password
    labels:
      strmcp.trigger.enable: "true"

  proxy:
    <<: *default_service
    image: strmcp/proxy:${PROXY}
    build: ./images/proxy
    container_name: proxy
    networks:
      capture:
      outside:
      wg:
        ipv4_address: &proxy_addr 10.66.66.66
    ports:
      - "8080:80"
    environment:
      <<: *default_service_environment
    volumes:
      - data:/captures:z,ro

  trigger:
    <<: *default_service
    image: strmcp/trigger:${TRIGGER}
    build: ./images/trigger
    container_name: trigger
    networks:
      - capture
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  dns:
    <<: *default_service
    image: coredns/coredns:${COREDNS}
    container_name: dns
    command: "-conf /Corefile"
    networks:
      wg:
        ipv4_address: &dns_addr 10.66.66.67
    environment:
      <<: *default_service_environment
      SC_DOMAIN: "${DOMAIN}"
      SC_PROXY: *proxy_addr
    configs:
      - source: dns
        target: /Corefile
    profiles:
      - wg

  wg:
    <<: *default_service
    image: weejewel/wg-easy:${WG}
    container_name: wg
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    networks:
      # Sorted to get deterministic order of interface names.
      outside:
      wg:
        ipv4_address: 10.66.66.69
    ports:
      - "51820:51820/udp"
      - "51821:51821"
    environment:
      <<: *default_service_environment
      WG_ALLOWED_IPS: 10.66.66.0/23
      WG_DEFAULT_ADDRESS: 10.66.67.x
      WG_DEFAULT_DNS: *dns_addr
      # Prevent access to external networks by routing only internal network (eth1).
      WG_DEVICE: eth1
      WG_HOST: "${WG_HOST}"
      WG_PORT: "${WG_PORT}"
      PASSWORD: "${WG_PASSWORD}"
    volumes:
      - wg:/etc/wireguard
    sysctls:
      net.ipv4.conf.all.src_valid_mark: 1
      net.ipv4.ip_forward: 1
    profiles:
      - wg

networks:
  capture:
    internal: true
  outside:
  wg:
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 10.66.66.0/24

volumes:
  data:
  wg:

configs:
  dns:
    file: ./configs/dns/Corefile

secrets:
  control_username:
    file: ./secrets/control_username
  control_password:
    file: ./secrets/control_password
